<div class="compound-demo">
   <div class="compound-demo__wrapper">
      <div class="compound-demo__panel">
         <h3>Options</h3>
         <Controls.checkbox:Checkbox class="CompoundDemo-hasComponentOptionCheckbox"
                                   readOnly="{{ _destroyedTestValue }}"
                                   bind:value="_hasComponentOptionsOption"
                                   caption="has component option"/>
         <br/>
         <Controls.checkbox:Checkbox class="CompoundDemo-redrawOnOptionsChangeCheckbox"
                                   readOnly="{{ _destroyedTestValue }}"
                                   bind:value="_redrawOnOptionsChangeOption"
                                   caption="redraw on options change"/>
         <br/>
         <Controls.checkbox:Checkbox class="CompoundDemo-buildChildOptionCheckbox"
                                   readOnly="{{ _destroyedTestValue }}"
                                   bind:value="_buildChildOption"
                                   caption="build child"/>
         <br/>
      </div>
      <div class="compound-demo__panel">
         <h3>Rebuild</h3>
         <Controls.input:Label caption="Type of change" required="{{false}}" />
         <Controls.ComboBox source="{{ _rebuildTypeItems }}"
                                  keyProperty="id"
                                  displayProperty="title"
                                  attr:class="CompoundDemo-Checkpoints__rebuildTypeComboBox"
                                  readOnly="{{ _destroyedTestValue }}"
                                  bind:selectedKey="_rebuildType"/>
      </div>
      <div class="compound-demo__panel compound-demo__checkpoints">
         <h3>Checkpoints&nbsp;
            <Controls.buttons:Button
            attr:class="CompoundDemo-Checkpoints__resetCheckpointsButton"
            readOnly="{{ _destroyedTestValue }}"
            on:click="resetCheckersHandler()"
            fontColorStyle="unaccented" viewMode="link"
            caption="reset"/>
         </h3>
         <div><span class="CompoundDemo-Checkpoints__options">options: {{ _optionsTestValue }}</span></div>
         <div><span class="CompoundDemo-Checkpoints__lifecycle">lifecycle: {{ _lifecycleTestValue }}</span></div>
         <div>
            <span class="CompoundDemo-Checkpoints__compatible">compatible: {{ _compatibleTestValue }}</span>
            &nbsp;
            <Controls.buttons:Button attr:class="CompoundDemo-Checkpoints__compatibleButton"
                                     readOnly="{{ _destroyedTestValue }}"
                                     on:click="testCompatibilityHandler()"
                                     fontColorStyle="unaccented" viewMode="link"
                                     caption="test"/>
         </div>
         <div>
            <span class="CompoundDemo-Checkpoints__enabled">enabled: {{ _enabledTestValue }}</span>
            &nbsp;
            <Controls.buttons:Button attr:class="CompoundDemo-Checkpoints__enabledButton"
                                     readOnly="{{ _destroyedTestValue }}"
                                     on:click="testEnabledHandler()"
                                     fontColorStyle="unaccented" viewMode="link"
                                     caption="test"/>
         </div>
         <div>
            <span class="CompoundDemo-Checkpoints__command">command: {{ _commandTestValue }}</span>
            &nbsp;
            <Controls.buttons:Button attr:class="CompoundDemo-Checkpoints__commandButton"
                                     readOnly="{{ _destroyedTestValue }}"
                                     on:click="testCommandsHandler()"
                                     fontColorStyle="unaccented" viewMode="link" caption="test"/>
         </div>
         <div>
            <span class="CompoundDemo-Checkpoints__rebuild">rebuild: {{ _rebuildTestValue }}</span>
            &nbsp;
            <Controls.buttons:Button attr:class="CompoundDemo-Checkpoints__rebuildButton"
                                     readOnly="{{ _destroyedTestValue }}"
                                     on:click="resetRebuildHandler()"
                                     fontColorStyle="unaccented" viewMode="link"
                                     caption="reset"/>
         </div>
         <div>
            <span class="CompoundDemo-Checkpoints__destroyed">destroyed: {{ _destroyedTestValue }}</span>
            &nbsp;
            <Controls.buttons:Button attr:class="CompoundDemo-Checkpoints__destroyButton"
                                     readOnly="{{ _destroyedTestValue }}"
                                     on:click="testDestroyHandler()"
                                     fontColorStyle="unaccented" viewMode="link"
                                     caption="test"/>
         </div>
      </div>
      <div if="{{ _compatibleReady && !_destroyedTestValue }}" class="compound-demo__panel">
         <ws:if data="{{ _hasComponentOptionsOption }}">
            <Core.CompoundContainer
               attr:class="CompoundDemo-CompoundContainer"
               component="{{ _rebuildType === 5 ? 'Lib/Control/CompoundControl/CompoundControl' : 'UIDemo/Compound/CompoundControl' }}"
               handlers="{{ lifecycleHooks }}"
               redrawOnOptionsChange="{{ _redrawOnOptionsChangeOption }}"
               name="compoundContainer"
               iWantBeWS3="{{ true }}">
               <ws:componentOptions
                  name="innerControl"
                  newOption="{{ _rebuildType === 1 }}"
                  someOption="{{ _rebuildType === 2 ? 'New rebuild value' : (_rebuildType === 3 ? undefined : 'Default value') }}"
                  someTemplate="{{ _rebuildType === 4 ? _newTemplate : _someTemplate }}"
                  buildChild="{{ _buildChildOption }}"
                  parent="{{ null }}"
               />
            </Core.CompoundContainer>
         </ws:if>
         <ws:else>
            <Core.CompoundContainer
               attr:class="CompoundDemo-CompoundContainer"
               component="UIDemo/Compound/CompoundControl"
               handlers="{{ lifecycleHooks }}"
               redrawOnOptionsChange="{{ _redrawOnOptionsChangeOption }}"
               name="compoundContainer"
               iWantBeWS3="{{ true }}"
               componentOptions="{{ undefined }}" />
         </ws:else>
      </div>
   </div>
</div>
